Metadata-Version: 2.1
Name: Celeste-PCG
Version: 0.1.1
Summary: Celeste Master Thesis by robilouis
Author-email: Louis Robinet <louisrobi@hotmail.fr>
License: MIT License
        
        Copyright (c) 2022 robilouis
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE

# Celeste-PCG

Master Thesis on PCG applied to level generation for the platformer Celeste

## Data loader

Loads data from the game, and makes a usable database

## Cskeleston

Generate structure of levels

## Playability

Model assessing the clearability of a room

## Room Generator

Model generating content procedurally to create rooms

## Julia Encoder function

Use the cskeleston, the room generator and the playability module to generate final levels
#### Requirements

- Level skeleton $L$ = \{ $l_1$, $\ldots$, $l_n$ \}: set of empty rooms indexed by an integer $i$, their sizes $(h_i, w_i)$ and their spatial coordinates $(x_i, y_i)$ 
- A set of generated rooms $R$ = \{ $r_1$, $\ldots$, $r_K$ \}
- Playability module
#### Procedure

For each empty room $l_i$, we match a room $r_{\phi(i)}$ such that:
- $r_{\phi(i)}$ has the right size (matching height/width)
- $r_{\phi(i)}$ is playable
- Exits somewhat match $\rightarrow$ maybe post-processing, same for starting/ending room.
