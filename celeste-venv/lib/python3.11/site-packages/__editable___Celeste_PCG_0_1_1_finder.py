import sys
from importlib.machinery import ModuleSpec, PathFinder
from importlib.machinery import all_suffixes as module_suffixes
from importlib.util import spec_from_file_location
from itertools import chain
from pathlib import Path

MAPPING = {"seleCte": "/home/robilouis/Documents/Private/seleCte/Celeste-PCG/seleCte"}
NAMESPACES = {
    "seleCte": ["/home/robilouis/Documents/Private/seleCte/Celeste-PCG/seleCte"],
    "seleCte.data": [
        "/home/robilouis/Documents/Private/seleCte/Celeste-PCG/seleCte/data"
    ],
    "seleCte.pcg.pcg_model_results": [
        "/home/robilouis/Documents/Private/seleCte/Celeste-PCG/seleCte/pcg/pcg_model_results"
    ],
    "seleCte.pcg.preprocessing.data_pcg_ready": [
        "/home/robilouis/Documents/Private/seleCte/Celeste-PCG/seleCte/pcg/preprocessing/data_pcg_ready"
    ],
    "seleCte.pcg.preprocessing.data_pcg_ready.rooms_40x23": [
        "/home/robilouis/Documents/Private/seleCte/Celeste-PCG/seleCte/pcg/preprocessing/data_pcg_ready/rooms_40x23"
    ],
    "seleCte.pcg.pcg_model_results.generated_maps": [
        "/home/robilouis/Documents/Private/seleCte/Celeste-PCG/seleCte/pcg/pcg_model_results/generated_maps"
    ],
    "seleCte.pcg.pcg_model_results.test_full_lvl": [
        "/home/robilouis/Documents/Private/seleCte/Celeste-PCG/seleCte/pcg/pcg_model_results/test_full_lvl"
    ],
    "seleCte.pcg.pcg_model_results.generated_maps.test_generation_mdmc": [
        "/home/robilouis/Documents/Private/seleCte/Celeste-PCG/seleCte/pcg/pcg_model_results/generated_maps/test_generation_mdmc"
    ],
    "seleCte.pcg.pcg_model_results.generated_maps.test_generation_mdmc_160_92": [
        "/home/robilouis/Documents/Private/seleCte/Celeste-PCG/seleCte/pcg/pcg_model_results/generated_maps/test_generation_mdmc_160_92"
    ],
    "seleCte.pcg.pcg_model_results.generated_maps.test_generation_mdmc.no_bt": [
        "/home/robilouis/Documents/Private/seleCte/Celeste-PCG/seleCte/pcg/pcg_model_results/generated_maps/test_generation_mdmc/no_bt"
    ],
    "seleCte.pcg.pcg_model_results.generated_maps.test_generation_mdmc.with_bt": [
        "/home/robilouis/Documents/Private/seleCte/Celeste-PCG/seleCte/pcg/pcg_model_results/generated_maps/test_generation_mdmc/with_bt"
    ],
    "seleCte.pcg.pcg_model_results.generated_maps.test_generation_mdmc_160_92.no_bt": [
        "/home/robilouis/Documents/Private/seleCte/Celeste-PCG/seleCte/pcg/pcg_model_results/generated_maps/test_generation_mdmc_160_92/no_bt"
    ],
    "seleCte.pcg.pcg_model_results.generated_maps.test_generation_mdmc_160_92.with_bt": [
        "/home/robilouis/Documents/Private/seleCte/Celeste-PCG/seleCte/pcg/pcg_model_results/generated_maps/test_generation_mdmc_160_92/with_bt"
    ],
    "seleCte.data.levels": [
        "/home/robilouis/Documents/Private/seleCte/Celeste-PCG/seleCte/data/levels"
    ],
    "seleCte.data.levels.LostLevels": [
        "/home/robilouis/Documents/Private/seleCte/Celeste-PCG/seleCte/data/levels/LostLevels"
    ],
}
PATH_PLACEHOLDER = "__editable__.Celeste_PCG-0.1.1.finder" + ".__path_hook__"


class _EditableFinder:  # MetaPathFinder
    @classmethod
    def find_spec(cls, fullname, path=None, target=None):
        extra_path = []

        # Top-level packages and modules (we know these exist in the FS)
        if fullname in MAPPING:
            pkg_path = MAPPING[fullname]
            return cls._find_spec(fullname, Path(pkg_path))

        # Handle immediate children modules (required for namespaces to work)
        # To avoid problems with case sensitivity in the file system we delegate
        # to the importlib.machinery implementation.
        parent, _, child = fullname.rpartition(".")
        if parent and parent in MAPPING:
            return PathFinder.find_spec(fullname, path=[MAPPING[parent], *extra_path])

        # Other levels of nesting should be handled automatically by importlib
        # using the parent path.
        return None

    @classmethod
    def _find_spec(cls, fullname, candidate_path):
        init = candidate_path / "__init__.py"
        candidates = (candidate_path.with_suffix(x) for x in module_suffixes())
        for candidate in chain([init], candidates):
            if candidate.exists():
                return spec_from_file_location(fullname, candidate)


class _EditableNamespaceFinder:  # PathEntryFinder
    @classmethod
    def _path_hook(cls, path):
        if path == PATH_PLACEHOLDER:
            return cls
        raise ImportError

    @classmethod
    def _paths(cls, fullname):
        # Ensure __path__ is not empty for the spec to be considered a namespace.
        return NAMESPACES[fullname] or MAPPING.get(fullname) or [PATH_PLACEHOLDER]

    @classmethod
    def find_spec(cls, fullname, target=None):
        if fullname in NAMESPACES:
            spec = ModuleSpec(fullname, None, is_package=True)
            spec.submodule_search_locations = cls._paths(fullname)
            return spec
        return None

    @classmethod
    def find_module(cls, fullname):
        return None


def install():
    if not any(finder == _EditableFinder for finder in sys.meta_path):
        sys.meta_path.append(_EditableFinder)

    if not NAMESPACES:
        return

    if not any(hook == _EditableNamespaceFinder._path_hook for hook in sys.path_hooks):
        # PathEntryFinder is needed to create NamespaceSpec without private APIS
        sys.path_hooks.append(_EditableNamespaceFinder._path_hook)
    if PATH_PLACEHOLDER not in sys.path:
        sys.path.append(PATH_PLACEHOLDER)  # Used just to trigger the path hook
